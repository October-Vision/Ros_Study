<!--
    使用 xacro 优化 URDF 版的小车底盘实现：

    实现思路:
    1.将一些常量、变量封装为 xacro:property
      比如:PI 值、小车底盘半径、离地间距、车轮半径、宽度 ....
    2.使用 宏 封装驱动轮以及支撑轮实现，调用相关宏生成驱动轮与支撑轮

-->

<robot name="sim_robot_base" xmlns:xacro="http://www.ros.org/wiki/xacro">
    <!--封装变量-->
    <xacro:property name="PI" value="3.1415926" />
    <!--宏 黑色设置-->
    <material name="black">
        <color rgba="0.0 0.0 0.0 1.0"/>
    </material>

    <!--底盘属新-->
    <xacro:property name="base_footprint_radius" value="0.001"/>
    <xacro:property name="base_link_radius" value="0.1" />  <!-- base_link 半径 -->
    <xacro:property name="base_link_length" value="0.08"/>  <!-- base_link 长 -->
    <xacro:property name="earth_space" value="0.015"/>  <!-- 离地间距 -->
    <xacro:property name="base_link_m" value="0.5" />  <!-- base_link 质量 -->

    <!--底盘-->
    <link name="base_footprint">
        <visual>
            <geometry>
                <sphere radius="${base_footprint_radius}" />
            </geometry>
            <material name="black"/>
        </visual>
    </link>

    <link name="base_link">
        <visual>
            <geometry>
                <cylinder radius="${base_link_radius}" length="${base_link_length}"/>
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <material name="yellow">
                <color rgba="0.5 0.3 0.0 0.5"/>
            </material>
        </visual>
       
        <collision>
            <geometry>
                <cylinder radius="${base_link_radius}" length="${base_link_length}"/>
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </collision>

        <xacro:cylinder_inertial_matrix m="${base_link_m}" r="${base_link_radius}" h="${base_link_length}" />
    
    </link>

    <joint name="base_link2base_footprint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0 0 ${earth_space + base_link_length / 2}" />
    </joint>


    <gazebo reference="base_link">
        <material>Gazebo/Yellow</material>
    </gazebo>


    <!-- 驱动轮 -->
    <!-- 驱动轮属性 -->

    <xacro:property name="wheel_radius" value="0.0325" />
    <xacro:property name="wheel_width" value="0.015" />
    <xacro:property name="wheel_m" value="0.05" />

    <!--驱动宏实现--> 
    <xacro:macro name="add_wheel" params="name flag">
        <link name="${name}_wheel">
            <visual>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}" />
                </geometry>
                <origin xyz="0.0 0.0 0.0" rpy="${PI / 2} 0.0 0.0" />
                <material name="black"/>
            </visual>

            <collision>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}" />
                </geometry>
                <origin xyz="0 0 0" rpy="${PI / 2} 0.0 0.0" />
            </collision>
            <xacro:cylinder_inertial_matrix m="${wheel_m}" r="${wheel_radius}" h="${wheel_width}" />
        </link> 


        <joint name="${name}_wheel2base_link" type="continuous">
            <parent link="base_link"/>
            <child link="${name}_wheel"/>
            <origin xyz="0 ${flag * base_link_radius} ${-(earth_space + base_link_length / 2 - wheel_radius) }" />
            <axis xyz="0 1 0"/>
        </joint>

        <gazebo reference="${name}_wheel">
            <material>Gazebo/Red</material>
        </gazebo>

   
    </xacro:macro>

    <xacro:add_wheel name="left" flag="1" />
    <xacro:add_wheel name="right" flag="-1" />

    <!-- 支撑轮 -->
    <!-- 支撑轮属性 -->
    <xacro:property name="su_wheel_radius" value="0.0075" />
    <xacro:property name="su_wheel_m" value="0.03" />
    <!--宏支撑轮-->
    <xacro:macro name="add_support_wheel" params="name flag">
        <link name="${name}_wheel">
            <visual>
                <geometry>
                    <sphere radius="${su_wheel_radius}" />
                </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="black"/>
            </visual>
            <collision>
                <geometry>
                    <sphere radius="${su_wheel_radius}" />
                </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            </collision>
            <xacro:sphere_inertial_matrix m="${su_wheel_m}" r="${su_wheel_radius}" />
        </link>

        <joint name="${name}_wheel2base_link" type="continuous">
            <parent link="base_link" />
            <child link="${name}_wheel" />
            <origin xyz="${flag * (base_link_radius - su_wheel_radius)} 0 ${-(base_link_length / 2 + earth_space / 2)}" />
            <axis xyz="1 1 1" />
        </joint>

        <gazebo reference="${name}_wheel">
            <material>Gazebo/Red</material>
        </gazebo>

    </xacro:macro>

    <xacro:add_support_wheel name="front" flag="1" />
    <xacro:add_support_wheel name="back" flag="-1" />
</robot>